#include <iostream>
#include "menu.h"
#include "storage.h"
#include "factory.h"

using namespace std;

IInterviewStorage *interviews;
AbstractFactory *bizFactory;
AbstractFactory *hwFactory;

void selectEngine() {
    cout << "Engine" << endl;
    cout << "\t1. custom linked list" << endl;
    cout << "\t2. std::vector" << endl;

    int e;
    while (true) {
        cin >> e;
        switch (e) {
            case 1:
                interviews = new ListInterviewStorage;
                return;
            case 2:
                interviews = new VectorInterviewStorage;
                return;
            default:
                cout << "Engine not recognized, try again:" << endl;
        }
    }
}

void searchMenu() {
    cout << "Select field for search" << endl;
    cout << "\t1. by ID" << endl;
    cout << "\t2. by Age" << endl;
    cout << "\t3. by Main bank" << endl;
    cout << "\t4. by Date" << endl;
    cout << "\t5. by Opinion" << endl;
    cout << "\t6. Cancel" << endl;

    int m, inp;
    string line;
    Interview *i;

    cin >> m;
    switch (m) {
        case 1:
            cout << "Введите критерий по полю " << DescribeID() << ": ";
            cin >> inp;
            i = interviews->SearchByID(inp);
            if (i != nullptr) {
                PrintInterview(i);
            } else {
                cout << "Not found" << endl;
            }
            break;
        case 2:
            cout << "Введите критерий по полю " << DescribeAge() << ": ";
            cin >> inp;
            i = interviews->SearchByAge(inp);
            if (i != nullptr) {
                PrintInterview(i);
            } else {
                cout << "Not found" << endl;
            }
            break;
        case 3:
            cout << "Введите критерий по полю " << DescribeMainBank() << ": ";
            cin >> inp;
            i = interviews->SearchByMainBank(static_cast<EBank>(inp));
            if (i != nullptr) {
                PrintInterview(i);
            } else {
                cout << "Not found" << endl;
            }
            break;
        case 4:
            cout << "Введите критерий по полю " << DescribeDate() << ": ";
            cin.ignore();
            getline(cin, line);
            i = interviews->SearchByDate(line);
            if (i != nullptr) {
                PrintInterview(i);
            } else {
                cout << "Not found" << endl;
            }
            break;
        case 5:
            cout << "Введите критерий по полю " << DescribeOpinion() << ": ";
            cin >> inp;
            i = interviews->SearchByOpinion(static_cast<EOpinion>(inp));
            if (i != nullptr) {
                PrintInterview(i);
            } else {
                cout << "Not found" << endl;
            }
            break;
        case 6:
            cout << "Canceled" << endl;
            return;
        default:
            cout << "Field not found, try again" << endl;
            break;
    }
}

const int autoGenerateCount = 250000;

void menu() {
    // init factories
    bizFactory = new BusinessmanFactory;
    hwFactory = new HousewifeFactory;

    int m, id;
    while (true) {
        cout << endl << endl << "Menu" << endl;
        cout << "\t1. Generate (500'000)" << endl;
        cout << "\t2. Add" << endl;
        cout << "\t3. Remove" << endl;
        cout << "\t4. Search" << endl;
        cout << "\t5. Statistics" << endl;
        cout << "\t6. Exit" << endl;

        cin >> m;
        switch (m) {
            case 1:
                for (int i = 1; i <= autoGenerateCount; i++) {
                    interviews->Add(bizFactory->CreateInterview(i));
                }
                for (int i = autoGenerateCount; i <= 2 * autoGenerateCount; i++) {
                    interviews->Add(hwFactory->CreateInterview(i));
                }
                cout << 2 * autoGenerateCount << " interviews autogenerated" << endl;
                break;
            case 2:
                interviews->Add(InputInterview());
                break;
            case 3:
                cout << "Укажите ID:" << endl;
                cin >> id;
                interviews->Remove(id);
                break;
            case 4:
                searchMenu();
                break;
            case 5:
                interviews->Stats();
                break;
            case 6:
                delete interviews;
                return;
            default:
                cout << "Menu item not recognized, try again:" << endl;
                break;
        }
    }
}


